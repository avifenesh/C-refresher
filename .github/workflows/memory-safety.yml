name: Memory Safety Analysis (ASan + Valgrind)

permissions:
  contents: read
  actions: write

on:
  push:
    branches: [main]
    paths: 
      - '**.c'
      - '**.h'
      - 'Makefile'
      - '.github/workflows/memory-safety.yml'
      - '!training/**'
  pull_request:
    branches: [main]
    paths: 
      - '**.c'
      - '**.h'
      - 'Makefile'
      - '.github/workflows/memory-safety.yml'
      - '!training/**'
  workflow_dispatch:

env:
  # Compiler configuration
  CC: gcc
  CFLAGS: >-
    -Wall -Wextra -Werror -Wno-unused-parameter -Wno-sign-compare 
    -Wno-unused-function -Wno-unused-variable -Wno-format-zero-length 
    -Wdeclaration-after-statement -Wvla -std=gnu11 -fno-strict-aliasing 
    -g -gdwarf-4 -Werror=date-time -Werror=incompatible-pointer-types 
    -Werror=designated-init -Werror=implicit-function-declaration
  ARCH_FLAGS: -march=armv8-a
  # AddressSanitizer configuration
  ASAN_OPTIONS: >-
    detect_leaks=1:abort_on_error=1:detect_stack_use_after_return=true:check_initialization_order=1:strict_init_order=1

jobs:
  addresssanitizer:
    name: AddressSanitizer Analysis
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04-arm, ubuntu-22.04-arm]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc build-essential libc6-dbg
        
    - name: Discover C files
      id: discover
      run: |
        c_files=$(find . -name "*.c" -type f -not -path "./training/*")
        echo "c_files<<EOF" >> $GITHUB_OUTPUT
        echo "$c_files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Compile with AddressSanitizer
      run: |
        mkdir -p build/asan
        failed_files=""
        success_count=0
        total_count=0
        
        c_files_found="${{ steps.discover.outputs.c_files }}"
        
        IFS=$'\n'
        for file in $c_files_found; do
          if [ -z "$file" ] || [ ! -f "$file" ]; then
            continue
          fi
          
          total_count=$((total_count + 1))
          base_name=$(basename "$file")
          base_name="${base_name%.c}"
          
          # Convert CFLAGS to array for proper expansion
          eval "CFLAGS_ARRAY=($CFLAGS)"
          eval "ARCH_FLAGS_ARRAY=($ARCH_FLAGS)"
          
          # Try to compile as executable (with main)
          if "$CC" "${CFLAGS_ARRAY[@]}" "${ARCH_FLAGS_ARRAY[@]}" -fsanitize=address -fno-omit-frame-pointer -O1 \
                  -o "build/asan/$base_name" "$file" 2>/dev/null; then
            success_count=$((success_count + 1))
          # If that fails, try to compile as object file (library without main)
          elif "$CC" "${CFLAGS_ARRAY[@]}" "${ARCH_FLAGS_ARRAY[@]}" -fsanitize=address -fno-omit-frame-pointer -O1 \
                  -c -o "build/asan/$base_name.o" "$file" 2>/dev/null; then
            success_count=$((success_count + 1))
          else
            echo "Failed to compile: $file"
            failed_files="$failed_files $file"
          fi
        done
        unset IFS
        
        echo "Compilation results: $success_count/$total_count files compiled"
        if [ -n "$failed_files" ]; then
          echo "Failed files: $failed_files"
        fi
        
        if [ "$success_count" -eq 0 ]; then
          echo "‚ùå No files were successfully compiled."
          exit 1
        fi
        
    - name: Run AddressSanitizer tests
      run: |
        cd build/asan
        failed_runs=""
        test_count=0
        
        for file in *; do
          if [ -x "$file" ] && [ ! -d "$file" ]; then
            test_count=$((test_count + 1))
            if timeout 30s ./"$file" 2>/dev/null; then
              continue
            else
              failed_runs="$failed_runs $file"
            fi
          fi
        done
        
        echo "Tested $test_count executables"
        if [ -n "$failed_runs" ]; then
          echo "‚ùå AddressSanitizer detected issues in: $failed_runs"
          exit 1
        fi
        
    - name: Upload ASan artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: asan-binaries-arm64-${{ matrix.os }}
        path: build/asan/
        retention-days: 1

  valgrind:
    name: Valgrind Analysis  
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04-arm, ubuntu-22.04-arm]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Valgrind and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind gcc build-essential libc6-dbg
        
    - name: Verify Valgrind installation
      run: |
        valgrind --version
        
    - name: Discover C files
      id: discover
      run: |
        c_files=$(find . -name "*.c" -type f -not -path "./training/*")
        echo "c_files<<EOF" >> $GITHUB_OUTPUT
        echo "$c_files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Compile for Valgrind
      run: |
        mkdir -p build/valgrind
        failed_files=""
        success_count=0
        total_count=0
        
        c_files_found="${{ steps.discover.outputs.c_files }}"
        
        # Convert CFLAGS to array for proper expansion
        eval "CFLAGS_ARRAY=($CFLAGS)"
        eval "ARCH_FLAGS_ARRAY=($ARCH_FLAGS)"
        
        IFS=$'\n'
        for file in $c_files_found; do
          if [ -n "$file" ] && [ -f "$file" ]; then
            total_count=$((total_count + 1))
            base_name=$(basename "$file")
            base_name="${base_name%.c}"
            
            # Try to compile as executable (with main)
            if "$CC" "${CFLAGS_ARRAY[@]}" "${ARCH_FLAGS_ARRAY[@]}" -O0 -g3 \
                    -o "build/valgrind/$base_name" "$file" 2>/dev/null; then
              success_count=$((success_count + 1))
            # If that fails, try to compile as object file (library without main)
            elif "$CC" "${CFLAGS_ARRAY[@]}" "${ARCH_FLAGS_ARRAY[@]}" -O0 -g3 \
                    -c -o "build/valgrind/$base_name.o" "$file" 2>/dev/null; then
              success_count=$((success_count + 1))
            else
              echo "Failed to compile: $file"
              failed_files="$failed_files $file"
            fi
          fi
        done
        unset IFS
        
        echo "Compilation results: $success_count/$total_count files compiled"
        if [ -n "$failed_files" ]; then
          echo "Failed files: $failed_files"
        fi
        
        if [ "$success_count" -eq 0 ]; then
          echo "‚ùå No files were successfully compiled."
          exit 1
        fi
        
    - name: Run Valgrind Memcheck
      run: |
        cd build/valgrind
        failed_runs=""
        
        for file in *; do
          if [ -x "$file" ] && [ ! -d "$file" ]; then
            if timeout 60s valgrind --tool=memcheck --leak-check=full --error-exitcode=1 ./"$file" >/dev/null 2>&1; then
              continue
            else
              failed_runs="$failed_runs $file"
            fi
          fi
        done
        
        if [ -n "$failed_runs" ]; then
          echo "‚ùå Valgrind detected issues in: $failed_runs"
          exit 1
        fi
        
    - name: Upload Valgrind binaries
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: valgrind-binaries-arm64-${{ matrix.os }}
        path: build/valgrind/
        retention-days: 1

  memory-safety-summary:
    name: Memory Safety Summary
    runs-on: ubuntu-latest
    needs: [addresssanitizer, valgrind]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "# üõ°Ô∏è Memory Safety Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.addresssanitizer.result }}" == "success" ]]; then
          echo "‚úÖ **AddressSanitizer**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **AddressSanitizer**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.valgrind.result }}" == "success" ]]; then
          echo "‚úÖ **Valgrind**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Valgrind**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
